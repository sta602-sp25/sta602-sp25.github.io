---
title: "Inverse problem"
format: 
    revealjs:
      mainfont: Lato
      smaller: true
---

# Toy example: logistic growth

## E. coli

```{r}
#| message: false
#| warning: false
#| code-fold: true
library(tidyverse)
```


E. coli grows in a petri dish according to the logistic growth equation,

$$
\frac{dP}{dt} = rP( 1 - \frac{P}{K})
$$

where $P(t)$ is the population size at time $t$, $r$ is the per capita growth rate, and $K$ is the carrying capacity of the dish.

This equation can be solved analytically (which is what makes this a toy example), 

$$
P(t) = \frac{K}{1 + Ae^{-rt}}
$$
where $A = \frac{K - P_0}{P_0}$ and $P_0$ is the initial population size at time 0.

But what if we could not solve solve the equation in closed form and, instead, could only simulate from the data generative model given a set of parameter values $K$, $r$ and $P(0)$. 

## Data

Bacterial populations are measured in CFU (colony forming units). At time $t = 0$, 1 colony forming unit was placed into a dish.

```{r}
populationFunction = function(K, r, t) {
  P0 = 1
  A = (K - P0) / P0
  round(K / (1 + (A * exp(-r * t))))
}
```

In the past, CFU are counted manually in a small pipetted sample and then the CFU per unit volume are multiplied by the total volume in the dish to estimate the total population size of bacteria at a given time $t$. 

A new machine has been created to replace this mundane task by automating the counting of CFUs in a sample. The machine counts the bacteria in the dish every fifteen minutes since the start of the experiment. Data are provided below.

```{r}
#| echo: false
set.seed(360)
time = seq(15, 360, by = 15)
P = populationFunction(K = 10^9, r = log(2)/20, t = time)
y = data.frame(P , time)
y$P = round(y$P + rnorm(n = 24, mean = 0, sd = .05*y$P))
# write_csv(y, "../data/E_coli.csv")
```

```{r}
#| warning: false
#| message: false
y = read_csv("https://sta602-sp25.github.io/data/E_coli.csv")
glimpse(y)
```

Note: time is in minutes.

## Model

We know $P_0 = 1$. Let $\theta = \{r, K\}$

We assume the machine has some normal measurement error that is proportional to the size of the population. Thus the data generative model is given by

$$
P(t) |r,K \sim N(f(\theta, t),\sigma^2 f(\theta, t))
$$
where $f(\theta, t)$ is computed by `populationFunction` on the previous slide.


## Exercise

Your task is to determine the measurment error of the machine $\sigma^2$.

It is well known that E coli takes about 20 $\pm 2.5$ minutes in laboratory conditions to double in size. Given this, we'd expect $r$ to be about $\frac{\log(2)}{20}$.

Furthermore, we know the carrying capacity of the petri dish is at least $10^8$ CFU.

1. Identify each unknown.

2. Use the information above to develop reasonable priors over each unknown.

3. Write pseudo-code of an MCMC sampler to make inference about the parameters.

4. (optional) Implement your sampler.

## Solution

The unknowns are $r, K, \sigma^2$.

Maybe we think it takes somewhere between 15 minutes and 25 minutes for the population size to double under our lab conditions. Some plausible prior choices are

$$
\begin{aligned}
r &\sim \text{Uniform}(\log(2)/25, \log(2)/15)\\
K &\propto 1 \text{ if } K > 10^8\\\
\sigma^2 &\sim \text{inverse-gamma}(1, 1)
\end{aligned}
$$

Pseudocode:

```
initialize r, K, sigma^2 
S = large number
for (i in 1:S) {
 - sample r* ~ cnorm(1, r_s, .01, a = log(2)/25, b = log(2)/15)
 - compute MH ratio: [posterior(r*)/posterior(r_s)] * [J(r_s | r*)/J(r* | r_s)]
 - accept/reject
 - sample K* ~ cnorm(1, K_s, 1E5, a = 1E8)
 - compute MH ratio like above and accept/reject
 - sample sigma^2* ~ cnorm(1, sigma^2_s, .1, a = 0)
 - compute MH ratio like above and accept/reject
}
```


<!-- ## Solution MCMC -->

<!-- ```{r} -->
<!-- #| eval: false -->
<!-- library(truncnorm) -->
<!-- set.seed(360) -->

<!-- rcnorm<-function(n, mean=0, sd=1, a=-Inf, b=Inf){ -->
<!--   u = runif(n, pnorm((a - mean) / sd), pnorm((b - mean) / sd)) -->
<!--   mean + (sd * qnorm(u)) -->
<!-- } -->

<!-- dtruncnormL = function(x, a = -Inf, b = Inf, mean, sd) { -->
<!--   log(dtruncnorm(x, a=a, b=b, mean = mean, sd = sd)) -->
<!-- } -->

<!-- # starting points -->
<!-- K_s =  1E9 -->
<!-- K = NULL -->

<!-- r0_s = runif(1, min = log(2)/30, max = log(2)/10) -->
<!-- r0 = NULL -->

<!-- sigma2_s = 1 / rgamma(1, 1, 1) -->
<!-- sigma2 = NULL -->

<!-- S = 100000 # number of iterations -->

<!-- delta_r = .02 # proposal variance -->
<!-- accept_r = 0 # keep track of acceptance rate -->

<!-- delta_sigma = 0.05 -->
<!-- accept_sigma = 0 -->

<!-- accept_k = 0 -->

<!-- getLogPosterior = function(K, r, sigma2) { -->
<!--   sigma = sqrt(sigma2) -->
<!--   mu = populationFunction(K = K, r = r, t = y$time) -->
<!--   if (K < 10^8) { -->
<!--     return(-Inf) -->
<!--   } -->
<!--   if(r < log(2)/10) { -->
<!--     return(-Inf) -->
<!--   } -->
<!--   if(r > log(2)/30) { -->
<!--     return(-Inf) -->
<!--   } -->
<!--   else { -->
<!--   return(sum(dnorm(y$P, mu, sd = sqrt(mu)*sigma), log = TRUE) +  -->
<!--            dgamma(1 / sigma2, 1, 1, log = TRUE)) -->
<!--   } -->
<!-- } -->

<!-- for (s in 1:S) { -->
<!--   # log everything for numerical stability # -->

<!--   ## propose K -->
<!--   K_proposal = rcnorm(1, mean = K_s, sd = 1E5, a = 1E8) -->
<!--   log.r = getLogPosterior(K = K_proposal, r = r0_s, sigma2 = sigma2_s) +  -->
<!--     dtruncnormL(K_s,  -->
<!--                 a=1E8,  -->
<!--                 mean = K_proposal, sd = 1E5) - -->
<!--     getLogPosterior(K = K_s, r = r0_s, sigma2 = sigma2_s) -  -->
<!--     dtruncnormL(K_proposal,  -->
<!--                 a=1E8,  -->
<!--                 mean = K_s, sd = 1E5) -->

<!--    if(log(runif(1)) < log.r)  { -->
<!--     K_s = K_proposal -->
<!--     accept_k = accept_k + 1  -->
<!--    } -->

<!--   ## propose r -->

<!--   r0_proposal = rcnorm(1, r0_s, delta_r, a = log(2)/30, b = log(2)/10) -->

<!--   log.r = getLogPosterior(K = K_s, r = r0_proposal, sigma2 = sigma2_s) - -->
<!--     getLogPosterior(K = K_s, r = r0_s, sigma2 = sigma2_s) -->

<!--    if(log(runif(1)) < log.r)  { -->
<!--     r0_s = r0_proposal -->
<!--     accept_r = accept_r + 1 -->
<!--    } -->

<!--   ## propose sigma2 -->

<!--   sigma2_proposal = rnorm(1, sigma2_s, delta_sigma) -->

<!--   log.r = getLogPosterior(K = K_s, r = r0_s, sigma2 = sigma2_proposal) - -->
<!--     getLogPosterior(K = K_s, r = r0_s, sigma2 = sigma2_s) -->

<!--    if(log(runif(1)) < log.r)  { -->
<!--     sigma2_s = sigma2_proposal -->
<!--     accept_sigma = accept_sigma + 1 -->
<!--    } -->

<!--   if(s %% 10 == 0) { -->
<!--   r0 = c(r0, r0_s) -->
<!--   K = c(K, K_s) -->
<!--   sigma2 = c(sigma2, sigma2_s) -->
<!--   } -->
<!-- } -->
<!-- ``` -->

